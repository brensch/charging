// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: server.proto

package relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayUpdateService_UpdateRelayState_FullMethodName = "/relay.RelayUpdateService/UpdateRelayState"
)

// RelayUpdateServiceClient is the client API for RelayUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayUpdateServiceClient interface {
	UpdateRelayState(ctx context.Context, in *RelayState, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type relayUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayUpdateServiceClient(cc grpc.ClientConnInterface) RelayUpdateServiceClient {
	return &relayUpdateServiceClient{cc}
}

func (c *relayUpdateServiceClient) UpdateRelayState(ctx context.Context, in *RelayState, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, RelayUpdateService_UpdateRelayState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayUpdateServiceServer is the server API for RelayUpdateService service.
// All implementations must embed UnimplementedRelayUpdateServiceServer
// for forward compatibility
type RelayUpdateServiceServer interface {
	UpdateRelayState(context.Context, *RelayState) (*UpdateResponse, error)
	mustEmbedUnimplementedRelayUpdateServiceServer()
}

// UnimplementedRelayUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayUpdateServiceServer struct {
}

func (UnimplementedRelayUpdateServiceServer) UpdateRelayState(context.Context, *RelayState) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelayState not implemented")
}
func (UnimplementedRelayUpdateServiceServer) mustEmbedUnimplementedRelayUpdateServiceServer() {}

// UnsafeRelayUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayUpdateServiceServer will
// result in compilation errors.
type UnsafeRelayUpdateServiceServer interface {
	mustEmbedUnimplementedRelayUpdateServiceServer()
}

func RegisterRelayUpdateServiceServer(s grpc.ServiceRegistrar, srv RelayUpdateServiceServer) {
	s.RegisterService(&RelayUpdateService_ServiceDesc, srv)
}

func _RelayUpdateService_UpdateRelayState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayUpdateServiceServer).UpdateRelayState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayUpdateService_UpdateRelayState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayUpdateServiceServer).UpdateRelayState(ctx, req.(*RelayState))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayUpdateService_ServiceDesc is the grpc.ServiceDesc for RelayUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.RelayUpdateService",
	HandlerType: (*RelayUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRelayState",
			Handler:    _RelayUpdateService_UpdateRelayState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

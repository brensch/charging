// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: contracts/server.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UpdateService_UpdateSite_FullMethodName        = "/contracts.UpdateService/UpdateSite"
	UpdateService_UpdateSiteSetting_FullMethodName = "/contracts.UpdateService/UpdateSiteSetting"
	UpdateService_UpdatePlug_FullMethodName        = "/contracts.UpdateService/UpdatePlug"
	UpdateService_UpdatePlugSetting_FullMethodName = "/contracts.UpdateService/UpdatePlugSetting"
	UpdateService_CreateSite_FullMethodName        = "/contracts.UpdateService/CreateSite"
	UpdateService_CreatePlug_FullMethodName        = "/contracts.UpdateService/CreatePlug"
)

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateSiteSetting(ctx context.Context, in *UpdateSiteSettingRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdatePlug(ctx context.Context, in *UpdatePlugRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdatePlugSetting(ctx context.Context, in *UpdatePlugSettingRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error)
	CreatePlug(ctx context.Context, in *CreatePlugRequest, opts ...grpc.CallOption) (*CreatePlugResponse, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UpdateService_UpdateSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) UpdateSiteSetting(ctx context.Context, in *UpdateSiteSettingRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UpdateService_UpdateSiteSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) UpdatePlug(ctx context.Context, in *UpdatePlugRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UpdateService_UpdatePlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) UpdatePlugSetting(ctx context.Context, in *UpdatePlugSettingRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, UpdateService_UpdatePlugSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error) {
	out := new(CreateSiteResponse)
	err := c.cc.Invoke(ctx, UpdateService_CreateSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) CreatePlug(ctx context.Context, in *CreatePlugRequest, opts ...grpc.CallOption) (*CreatePlugResponse, error) {
	out := new(CreatePlugResponse)
	err := c.cc.Invoke(ctx, UpdateService_CreatePlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility
type UpdateServiceServer interface {
	UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateResponse, error)
	UpdateSiteSetting(context.Context, *UpdateSiteSettingRequest) (*UpdateResponse, error)
	UpdatePlug(context.Context, *UpdatePlugRequest) (*UpdateResponse, error)
	UpdatePlugSetting(context.Context, *UpdatePlugSettingRequest) (*UpdateResponse, error)
	CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error)
	CreatePlug(context.Context, *CreatePlugRequest) (*CreatePlugResponse, error)
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (UnimplementedUpdateServiceServer) UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (UnimplementedUpdateServiceServer) UpdateSiteSetting(context.Context, *UpdateSiteSettingRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiteSetting not implemented")
}
func (UnimplementedUpdateServiceServer) UpdatePlug(context.Context, *UpdatePlugRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlug not implemented")
}
func (UnimplementedUpdateServiceServer) UpdatePlugSetting(context.Context, *UpdatePlugSettingRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugSetting not implemented")
}
func (UnimplementedUpdateServiceServer) CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedUpdateServiceServer) CreatePlug(context.Context, *CreatePlugRequest) (*CreatePlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlug not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_UpdateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_UpdateSiteSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).UpdateSiteSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_UpdateSiteSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).UpdateSiteSetting(ctx, req.(*UpdateSiteSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_UpdatePlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).UpdatePlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_UpdatePlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).UpdatePlug(ctx, req.(*UpdatePlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_UpdatePlugSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlugSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).UpdatePlugSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_UpdatePlugSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).UpdatePlugSetting(ctx, req.(*UpdatePlugSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_CreateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_CreatePlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).CreatePlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_CreatePlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).CreatePlug(ctx, req.(*CreatePlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSite",
			Handler:    _UpdateService_UpdateSite_Handler,
		},
		{
			MethodName: "UpdateSiteSetting",
			Handler:    _UpdateService_UpdateSiteSetting_Handler,
		},
		{
			MethodName: "UpdatePlug",
			Handler:    _UpdateService_UpdatePlug_Handler,
		},
		{
			MethodName: "UpdatePlugSetting",
			Handler:    _UpdateService_UpdatePlugSetting_Handler,
		},
		{
			MethodName: "CreateSite",
			Handler:    _UpdateService_CreateSite_Handler,
		},
		{
			MethodName: "CreatePlug",
			Handler:    _UpdateService_CreatePlug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/server.proto",
}

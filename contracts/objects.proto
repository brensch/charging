syntax = "proto3";

package contracts;

option go_package = "go/contracts";

// FuzeGroup represents a collection of plugs that need to obey an electrical
// limit, ie all four plugs in a shelly 4pro.
message FuzeSettings {
  string id = 1;
  string name = 2;
  double current_limit = 3;
  string site_id = 4;
}

enum StateMachineState {
  StateMachineState_INITIALISING = 0;
  StateMachineState_ON = 1;
  StateMachineState_OFF = 2;
  StateMachineState_USER_REQUESTED_ON = 3;
  StateMachineState_USER_REQUESTED_OFF = 4;
  StateMachineState_LOCAL_COMMAND_ISSUED_ON = 5;
  StateMachineState_LOCAL_COMMAND_ISSUED_OFF = 6;
}

message StateMachineTransition {
  string id = 1;
  StateMachineState state = 2;
  string reason = 3;
  int64 time_ms = 4;
  string plug_id = 5;
  string owner_id = 6;
}

message StateMachinePossibleNextStates {
  string plug_id = 1;
  repeated StateMachineState possible_states = 2;
}

// plug settings are all the things the user can update in the UI
message PlugSettings {
  string id = 1;
  string name = 2;
  double current_limit = 3;
  string site_id = 4;
  // used to decide whether to update latest_reading in the plugstatus.
  // if a user has checked recently, update, otherwise, do not write readings
  // value.
  int64 last_time_user_checking_ms = 5;
}

message LocalStateRequest {
  string id = 1;
  string plug_id = 2;
  string site_id = 3;
  RequestedState requested_state = 4;
  int64 request_time = 5;
}

message LocalStateResponse {
  string req_id = 1;
  RequestedState resultant_state = 2;
  string plug_id = 3;
  string site_id = 4;
  int64 time = 5;
}

// this gets written by the frontend and never edited
message UserRequest {
  string id = 1;
  string user_id = 2;
  string plug_id = 3;
  StateMachineState requested_state = 4;
  int64 time_requested = 5;
  UserRequestResult result = 6;
}

// this can only be written by the backend and shows the result of a request
message UserRequestResult {
  int64 time_entered_state = 1;
  UserRequestStatus status = 2;
  string reason = 3;
}

enum UserRequestStatus {
  RequestedStatus_UNKNOWN = 0;
  // need to write a fs rule to only allow this status from non backend
  RequestedStatus_PENDING = 1;
  RequestedStatus_SUCCESS = 2;
  RequestedStatus_FAILURE = 3;
  RequestedStatus_RECEIVED = 4;
  // TODO: add more failure reason statuses
}

// this is what is used by the frontend to visualise what's going on.
// it should only be updateable by the mothership
// it's also used on startup of the mothership to hydrate its statemachinemap
message PlugStatus {
  string id = 1;
  string site_id = 2;
  StateMachineTransition state = 3;
  Reading latest_reading = 4;
}

enum RequestedState {
  RequestedState_UNKNOWN = 0;  // Default value, used as a placeholder
  RequestedState_ON = 1;       // Relay is on
  RequestedState_OFF = 2;      // Relay is off
}

enum RequestedStateReason {
  RequestedStateReason_UNKNOWN = 0;  // Default value, used as a placeholder
  RequestedStateReason_PRICE = 1;
  RequestedStateReason_USER = 2;
  RequestedStateReason_CREDIT = 3;
}

// message FuzeLocalState {
//   string id = 1;
//   double current = 2;
//   FuzeState state = 3;
// }

enum FuzeState {
  FuzeState_UNKNOWN = 0;  // Default value, used as a placeholder
  FuzeState_OK = 1;
  FuzeState_LIMITING = 2;
}

// message PlugLocalState {
//   string id = 1;
//   Reading latest_reading = 2;
//   string latest_command_id = 3;
//   string latest_action_id = 4;
// }

enum ActualState {
  ActualState_UNKNOWN = 0;      // Default value, used as a placeholder
  ActualState_ON = 1;           // Relay is on
  ActualState_OFF = 2;          // Relay is off
  ActualState_MIA = 3;          // Not available or missing
  ActualState_OVERCURRENT = 4;  // Overcurrent detected
  // TODO: decide how we represent off for cost reasons etc
}

message Reading {
  ActualState state =
      1;               // Indicates if the relay is currently on, off, MIA, etc.
  double current = 2;  // The current power reading in watts
  double voltage = 3;  // The voltage reading in volts
  double power_factor = 4;  // Power factor, typically a value between -1 and 1
  int64 timestamp = 5;      // Timestamp of the reading in seconds since epoch
  double energy = 6;        // The energy reading in kWh
  string plug_id = 7;
  string fuze_id = 8;
}

message ReadingChunk {
  string site_id = 1;
  repeated Reading readings = 2;
}

message SiteSettings {
  string id = 1;
  string name = 2;
  string description = 3;
}
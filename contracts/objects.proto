syntax = "proto3";

package contracts;

option go_package = "go/contracts";

// FuzeGroup represents a collection of plugs that need to obey an electrical
// limit, ie all four plugs in a shelly 4pro.
message FuzeSettings {
  string id = 1;
  string name = 2;
  double current_limit = 3;
  string site_id = 4;
}

enum StateMachineState {
  StateMachineState_INITIALISING = 0;
  StateMachineState_ACCOUNT_NULL = 7;
  StateMachineState_ACCOUNT_ADDED = 8;
  StateMachineState_ENTERING_QUEUE = 9;
  StateMachineState_IN_QUEUE = 10;
  StateMachineState_SENSING_START_REQUESTED = 11;
  StateMachineState_SENSING_START_ISSUED_LOCALLY = 12;
  StateMachineState_SENSING_CHARGE = 14;
  StateMachineState_CHARGING = 15;
  StateMachineState_CHARGE_COMPLETE = 16;
  StateMachineState_ACCOUNT_REMOVAL_REQUESTED = 17;
  StateMachineState_ACCOUNT_REMOVAL_ISSUED_LOCALLY = 18;
  StateMachineState_WAITING_FOR_PLUG_IN = 19;
  StateMachineState_COMMISSIONING = 20;
  StateMachineState_ACCOUNT_REMOVAL_NOT_RESPONDING = 21;
  StateMachineState_SENSING_START_NOT_RESPONDING = 22;
}

message StateMachineTransition {
  string id = 1;
  StateMachineState state = 2;
  string reason = 3;
  int64 time_ms = 4;
  string plug_id = 5;
  string owner_id = 6;
}

// plug settings are all the things the user can update in the UI
message PlugSettings {
  string id = 1;
  string name = 2;
  double current_limit = 3;
  string site_id = 4;
  // used to decide whether to update latest_reading in the plugstatus.
  // if a user has checked recently, update, otherwise, do not write readings
  // value.
  int64 last_time_user_checking_ms = 5;
  string qr_code = 6;
}

message LocalStateRequest {
  string id = 1;
  string plug_id = 2;
  string site_id = 3;
  RequestedState requested_state = 4;
  int64 request_time = 5;
}

message LocalStateResponse {
  string req_id = 1;
  RequestedState resultant_state = 2;
  string plug_id = 3;
  string site_id = 4;
  int64 time = 5;
}

// this gets written by the frontend and never edited
message UserRequest {
  string id = 1;
  string user_id = 2;
  string plug_id = 3;
  StateMachineState requested_state = 4;
  int64 time_requested = 5;
  UserRequestResult result = 6;
}

// this can only be written by the backend and shows the result of a request
message UserRequestResult {
  int64 time_entered_state = 1;
  UserRequestStatus status = 2;
  string reason = 3;
}

enum UserRequestStatus {
  RequestedStatus_UNKNOWN = 0;
  // need to write a fs rule to only allow this status from non backend
  RequestedStatus_PENDING = 1;
  RequestedStatus_SUCCESS = 2;
  RequestedStatus_FAILURE = 3;
  RequestedStatus_RECEIVED = 4;
  // TODO: add more failure reason statuses
}

// this is what is used by the frontend to visualise what's going on.
// it should only be updateable by the mothership
// it's also used on startup of the mothership to hydrate its statemachinemap
message PlugStatus {
  string id = 1;
  string site_id = 2;
  StateMachineTransition state = 3;
  Reading latest_reading = 4;
  StateMachineDetails state_machine_details = 5;
  repeated StateMachineState possible_next_states = 6;
  repeated string possible_next_states_labels = 7;
}

message StateMachineDetails {
  string current_owner = 1;
  int64 charge_start_time_ms = 2;
  int64 queue_position = 3;
  int64 queue_entered_ms = 4;
  string error = 5;
  string session_id = 6;
}

enum RequestedState {
  RequestedState_UNKNOWN = 0;  // Default value, used as a placeholder
  RequestedState_ON = 1;       // Relay is on
  RequestedState_OFF = 2;      // Relay is off
}

enum RequestedStateReason {
  RequestedStateReason_UNKNOWN = 0;  // Default value, used as a placeholder
  RequestedStateReason_PRICE = 1;
  RequestedStateReason_USER = 2;
  RequestedStateReason_CREDIT = 3;
}

enum FuzeState {
  FuzeState_UNKNOWN = 0;  // Default value, used as a placeholder
  FuzeState_OK = 1;
  FuzeState_LIMITING = 2;
}

enum ActualState {
  ActualState_UNKNOWN = 0;      // Default value, used as a placeholder
  ActualState_ON = 1;           // Relay is on
  ActualState_OFF = 2;          // Relay is off
  ActualState_MIA = 3;          // Not available or missing
  ActualState_OVERCURRENT = 4;  // Overcurrent detected
  // TODO: decide how we represent off for cost reasons etc
}

message Reading {
  ActualState state =
      1;               // Indicates if the relay is currently on, off, MIA, etc.
  double current = 2;  // The current power reading in watts
  double voltage = 3;  // The voltage reading in volts
  double power_factor = 4;  // Power factor, typically a value between -1 and 1
  int64 timestamp_ms = 5;   // Timestamp of the reading in ms since epoch
  string plug_id = 6;
  string fuze_id = 7;
}

message ReadingChunk {
  string site_id = 1;
  repeated Reading readings = 2;
}

message SiteSettings {
  string id = 1;
  string name = 2;
  string description = 3;
}

message DeviceAnnouncement {
  string site_id = 1;
  repeated string plug_ids = 2;
  repeated string fuze_ids = 3;
}

enum SessionEventType {
  SessionEventType_UNSPECIFIED = 0;
  SessionEventType_START = 1;
  SessionEventType_FINISH = 2;
  SessionEventType_ABORT = 3;
  // think of more as they come up
}

message SessionEvent {
  string session_id = 1;
  string plug_id = 2;
  string user_id = 3;
  SessionEventType event_type = 4;
}

message Session {
  string session_id = 1;
  int64 start_ms = 2;
  int64 finish_ms = 3;
  string plug_id = 4;
  string site_id = 5;
  string owner_id = 6;
  double total_kwh = 7;
  int64 cents = 8;
}

message CommissioningStateRequest {
  string site_id = 1;
  string requestor_id = 2;
  int64 time_requested_ms = 3;
  string active_plug = 4;
  bool acked = 5;
}
